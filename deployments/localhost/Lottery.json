{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__Closed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sent",
          "type": "uint256"
        }
      ],
      "name": "Lottery__NotEnoughEthSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timePassed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numEntrants",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getEntrant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntrants",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumEntrants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVRFCoordinatorV2",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0fe60f7ab3e32ffc5bd0629b6a15488ccae30cbeb7cecda509a0d9c8d3f50b05",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1458817",
    "logsBloom": "0x
    "blockHash": "0xb5aa0de1a4e943396be54e66d32cedb5e3c39cfa0309cc8192b22b3efa575082",
    "transactionHash": "0x0fe60f7ab3e32ffc5bd0629b6a15488ccae30cbeb7cecda509a0d9c8d3f50b05",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1458817",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "500000",
    "0x0000000000000000000000000000000000000000000000000000000000000001",
    "10000000000000000",
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "02388b378bd84e0e862a633fc7ebf8ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__Closed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"}],\"name\":\"Lottery__NotEnoughEthSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timePassed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numEntrants\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEntrant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntrants\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumEntrants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVRFCoordinatorV2\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Dustin Stacy\",\"details\":\"This implements the Chainlink VRF Version 2\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Lottery Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating a sample raffle contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n/* Custom Errors */\\nerror Lottery__Closed();\\nerror Lottery__NotEnoughEthSent(uint256 required, uint256 sent);\\nerror Lottery__TransferFailed();\\nerror Lottery__UpkeepNotNeeded(\\n    uint256 state,\\n    uint256 timePassed,\\n    uint256 balance,\\n    uint256 numEntrants\\n);\\n\\n///@title A sample Lottery Contract\\n///@author Dustin Stacy\\n///@notice This contract is for creating a sample raffle contract\\n///@dev This implements the Chainlink VRF Version 2\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Type declarations */\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State variables */\\n\\n    // Chainlink VRF variables\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant NUM_WORDS = 1;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n\\n    // Lottery variables\\n    uint256 private immutable i_entranceFee;\\n    uint256 private immutable i_interval;\\n    address payable[] private entrants;\\n    address private recentWinner;\\n    uint256 private lastTimeStamp;\\n    LotteryState private lotteryState;\\n\\n    /* Events */\\n    event LotteryEntered(address indexed player);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    /* Functions */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane, //keyHash\\n        uint32 callbackGasLimit,\\n        uint64 subscriptionId,\\n        uint256 entranceFee,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n        i_subscriptionId = subscriptionId;\\n        i_entranceFee = entranceFee;\\n        i_interval = interval;\\n        lastTimeStamp = block.timestamp;\\n        lotteryState = LotteryState.OPEN;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Lottery__NotEnoughEthSent({\\n                required: i_entranceFee,\\n                sent: msg.value\\n            });\\n        }\\n        if (lotteryState != LotteryState.OPEN) {\\n            revert Lottery__Closed();\\n        }\\n        entrants.push(payable(msg.sender));\\n        emit LotteryEntered(msg.sender);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /*performData*/)\\n    {\\n        bool isOpen = (LotteryState.OPEN == lotteryState);\\n        bool timePassed = ((block.timestamp - lastTimeStamp) > i_interval);\\n        bool hasBalance = address(this).balance > 0;\\n        bool hasPlayers = (entrants.length > 0);\\n        upkeepNeeded = (isOpen && timePassed && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata /*performData*/) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpkeepNotNeeded({\\n                state: uint256(lotteryState),\\n                timePassed: (block.timestamp - lastTimeStamp),\\n                balance: address(this).balance,\\n                numEntrants: entrants.length\\n            });\\n        }\\n        lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % entrants.length;\\n        address payable mostRecentWinner = entrants[indexOfWinner];\\n        recentWinner = mostRecentWinner;\\n        entrants = new address payable[](0);\\n        lastTimeStamp = block.timestamp;\\n        lotteryState = LotteryState.OPEN;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* Getter Functions */\\n\\n    function getVRFCoordinatorV2()\\n        public\\n        view\\n        returns (VRFCoordinatorV2Interface)\\n    {\\n        return i_vrfCoordinator;\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getGasLane() public view returns (bytes32) {\\n        return i_gasLane;\\n    }\\n\\n    function getCallbackGasLimit() public view returns (uint32) {\\n        return i_callbackGasLimit;\\n    }\\n\\n    function getSubscriptionId() public view returns (uint64) {\\n        return i_subscriptionId;\\n    }\\n\\n    function getEntrant(uint256 index) public view returns (address) {\\n        return entrants[index];\\n    }\\n\\n    function getEntrants() public view returns (address payable[] memory) {\\n        return entrants;\\n    }\\n\\n    function getNumEntrants() public view returns (uint256) {\\n        return entrants.length;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return lotteryState;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return lastTimeStamp;\\n    }\\n}\\n\",\"keccak256\":\"0x606290ea9c887e75482159bb8dc0be494030186a1bdbd727c3f8dfb95c056c09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001cca38038062001cca833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508460c081815250508363ffffffff1660e08163ffffffff16815250508267ffffffffffffffff166101008167ffffffffffffffff1681525050816101208181525050806101408181525050426002819055506000600360006101000a81548160ff021916908360018111156200011d576200011c62000330565b5b02179055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b600063ffffffff82169050919050565b620001ee81620001d3565b8114620001fa57600080fd5b50565b6000815190506200020e81620001e3565b92915050565b600067ffffffffffffffff82169050919050565b620002338162000214565b81146200023f57600080fd5b50565b600081519050620002538162000228565b92915050565b6000819050919050565b6200026e8162000259565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001fd565b9450506060620002fd89828a0162000242565b93505060806200031089828a016200027d565b92505060a06200032389828a016200027d565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516118d8620003f26000396000818161078d01526108360152600081816103f30152818161088401526108ac01526000818161062d0152610ab00152600081816106500152610ad801526000818161060c015261085e0152600081816104e501526105d0015260008181610419015261046d01526118d86000f3fe6080604052600436106100f35760003560e01c80636e04ff0d1161008a578063d30c60f411610059578063d30c60f4146102fc578063de3d9fb714610327578063de8be8e714610352578063f9807c461461037d576100f3565b80636e04ff0d1461025e57806391ad27b41461029c578063c19dd76b146102c7578063c1af5785146102f2576100f3565b806340293df5116100c657806340293df5146101b45780634585e33b146101df578063473f1ddc146102085780636b68c03c14610233576100f3565b806304763ce0146100f857806309bc33a7146101355780631fe543e314610160578063320229eb14610189575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610e6e565b6103a8565b60405161012c9190610edc565b60405180910390f35b34801561014157600080fd5b5061014a6103ef565b6040516101579190610f06565b60405180910390f35b34801561016c57600080fd5b506101876004803603810190610182919061107a565b610417565b005b34801561019557600080fd5b5061019e6104d7565b6040516101ab9190610f06565b60405180910390f35b3480156101c057600080fd5b506101c96104e1565b6040516101d69190611135565b60405180910390f35b3480156101eb57600080fd5b50610206600480360381019061020191906111ab565b610509565b005b34801561021457600080fd5b5061021d610709565b60405161022a9190610edc565b60405180910390f35b34801561023f57600080fd5b50610248610733565b604051610255919061126f565b60405180910390f35b34801561026a57600080fd5b506102856004803603810190610280919061133f565b61074a565b604051610293929190611422565b60405180910390f35b3480156102a857600080fd5b506102b1610832565b6040516102be9190610f06565b60405180910390f35b3480156102d357600080fd5b506102dc61085a565b6040516102e9919061146b565b60405180910390f35b6102fa610882565b005b34801561030857600080fd5b50610311610a1e565b60405161031e9190611556565b60405180910390f35b34801561033357600080fd5b5061033c610aac565b604051610349919061159b565b60405180910390f35b34801561035e57600080fd5b50610367610ad4565b60405161037491906115d5565b60405180910390f35b34801561038957600080fd5b50610392610afc565b60405161039f9190610f06565b60405180910390f35b60008082815481106103bd576103bc6115f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104c092919061161f565b60405180910390fd5b6104d38282610b08565b5050565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006105236040518060200160405280600081525061074a565b509050806105a157600360009054906101000a900460ff16600181111561054d5761054c6111f8565b5b6002544261055b9190611677565b476000805490506040517fb29f5aac00000000000000000000000000000000000000000000000000000000815260040161059894939291906116ab565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156105c7576105c66111f8565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161069195949392919061173e565b6020604051808303816000875af11580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d491906117a6565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900460ff16905090565b600060606000600360009054906101000a900460ff166001811115610772576107716111f8565b5b60006001811115610786576107856111f8565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107ba9190611677565b119050600080471190506000806000805490501190508380156107da5750825b80156107e35750815b80156107ec5750805b9550856040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610909577f0000000000000000000000000000000000000000000000000000000000000000346040517f825939690000000000000000000000000000000000000000000000000000000081526004016109009291906117d3565b60405180910390fd5b6000600181111561091d5761091c6111f8565b5b600360009054906101000a900460ff16600181111561093f5761093e6111f8565b5b14610976576040517f7d6d79f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f4c72b57c1ca715219cf2c7be9edc8a3ea19dfb9a76fb7a05e2a8062a027ee97060405160405180910390a2565b60606000805480602002602001604051908101604052809291908181526020018280548015610aa257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a58575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000808054905082600081518110610b2357610b226115f0565b5b6020026020010151610b35919061182b565b90506000808281548110610b4c57610b4b6115f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610bd557610bd4610f37565b5b604051908082528060200260200182016040528015610c035781602001602082028036833780820191505090505b5060009080519060200190610c19929190610d7d565b50426002819055506000600360006101000a81548160ff02191690836001811115610c4757610c466111f8565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610c949061188d565b60006040518083038185875af1925050503d8060008114610cd1576040519150601f19603f3d011682016040523d82523d6000602084013e610cd6565b606091505b5050905080610d11576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610df6579160200282015b82811115610df55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d9d565b5b509050610e039190610e07565b5090565b5b80821115610e20576000816000905550600101610e08565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610e4b81610e38565b8114610e5657600080fd5b50565b600081359050610e6881610e42565b92915050565b600060208284031215610e8457610e83610e2e565b5b6000610e9284828501610e59565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec682610e9b565b9050919050565b610ed681610ebb565b82525050565b6000602082019050610ef16000830184610ecd565b92915050565b610f0081610e38565b82525050565b6000602082019050610f1b6000830184610ef7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f6f82610f26565b810181811067ffffffffffffffff82111715610f8e57610f8d610f37565b5b80604052505050565b6000610fa1610e24565b9050610fad8282610f66565b919050565b600067ffffffffffffffff821115610fcd57610fcc610f37565b5b602082029050602081019050919050565b600080fd5b6000610ff6610ff184610fb2565b610f97565b9050808382526020820190506020840283018581111561101957611018610fde565b5b835b81811015611042578061102e8882610e59565b84526020840193505060208101905061101b565b5050509392505050565b600082601f83011261106157611060610f21565b5b8135611071848260208601610fe3565b91505092915050565b6000806040838503121561109157611090610e2e565b5b600061109f85828601610e59565b925050602083013567ffffffffffffffff8111156110c0576110bf610e33565b5b6110cc8582860161104c565b9150509250929050565b6000819050919050565b60006110fb6110f66110f184610e9b565b6110d6565b610e9b565b9050919050565b600061110d826110e0565b9050919050565b600061111f82611102565b9050919050565b61112f81611114565b82525050565b600060208201905061114a6000830184611126565b92915050565b600080fd5b60008083601f84011261116b5761116a610f21565b5b8235905067ffffffffffffffff81111561118857611187611150565b5b6020830191508360018202830111156111a4576111a3610fde565b5b9250929050565b600080602083850312156111c2576111c1610e2e565b5b600083013567ffffffffffffffff8111156111e0576111df610e33565b5b6111ec85828601611155565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611238576112376111f8565b5b50565b600081905061124982611227565b919050565b60006112598261123b565b9050919050565b6112698161124e565b82525050565b60006020820190506112846000830184611260565b92915050565b600080fd5b600067ffffffffffffffff8211156112aa576112a9610f37565b5b6112b382610f26565b9050602081019050919050565b82818337600083830152505050565b60006112e26112dd8461128f565b610f97565b9050828152602081018484840111156112fe576112fd61128a565b5b6113098482856112c0565b509392505050565b600082601f83011261132657611325610f21565b5b81356113368482602086016112cf565b91505092915050565b60006020828403121561135557611354610e2e565b5b600082013567ffffffffffffffff81111561137357611372610e33565b5b61137f84828501611311565b91505092915050565b60008115159050919050565b61139d81611388565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113dd5780820151818401526020810190506113c2565b60008484015250505050565b60006113f4826113a3565b6113fe81856113ae565b935061140e8185602086016113bf565b61141781610f26565b840191505092915050565b60006040820190506114376000830185611394565b818103602083015261144981846113e9565b90509392505050565b6000819050919050565b61146581611452565b82525050565b6000602082019050611480600083018461145c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006114bd82610e9b565b9050919050565b6114cd816114b2565b82525050565b60006114df83836114c4565b60208301905092915050565b6000602082019050919050565b600061150382611486565b61150d8185611491565b9350611518836114a2565b8060005b8381101561154957815161153088826114d3565b975061153b836114eb565b92505060018101905061151c565b5085935050505092915050565b6000602082019050818103600083015261157081846114f8565b905092915050565b600067ffffffffffffffff82169050919050565b61159581611578565b82525050565b60006020820190506115b0600083018461158c565b92915050565b600063ffffffff82169050919050565b6115cf816115b6565b82525050565b60006020820190506115ea60008301846115c6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506116346000830185610ecd565b6116416020830184610ecd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061168282610e38565b915061168d83610e38565b92508282039050818111156116a5576116a4611648565b5b92915050565b60006080820190506116c06000830187610ef7565b6116cd6020830186610ef7565b6116da6040830185610ef7565b6116e76060830184610ef7565b95945050505050565b600061ffff82169050919050565b611707816116f0565b82525050565b600061172861172361171e846116f0565b6110d6565b6115b6565b9050919050565b6117388161170d565b82525050565b600060a082019050611753600083018861145c565b611760602083018761158c565b61176d60408301866116fe565b61177a60608301856115c6565b611787608083018461172f565b9695505050505050565b6000815190506117a081610e42565b92915050565b6000602082840312156117bc576117bb610e2e565b5b60006117ca84828501611791565b91505092915050565b60006040820190506117e86000830185610ef7565b6117f56020830184610ef7565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061183682610e38565b915061184183610e38565b925082611851576118506117fc565b5b828206905092915050565b600081905092915050565b50565b600061187760008361185c565b915061188282611867565b600082019050919050565b60006118988261186a565b915081905091905056fea2646970667358221220de29fa8ab278c574e0877ba88350dfee0edea08ac4955b0688b2cbe188bda30964736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80636e04ff0d1161008a578063d30c60f411610059578063d30c60f4146102fc578063de3d9fb714610327578063de8be8e714610352578063f9807c461461037d576100f3565b80636e04ff0d1461025e57806391ad27b41461029c578063c19dd76b146102c7578063c1af5785146102f2576100f3565b806340293df5116100c657806340293df5146101b45780634585e33b146101df578063473f1ddc146102085780636b68c03c14610233576100f3565b806304763ce0146100f857806309bc33a7146101355780631fe543e314610160578063320229eb14610189575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190610e6e565b6103a8565b60405161012c9190610edc565b60405180910390f35b34801561014157600080fd5b5061014a6103ef565b6040516101579190610f06565b60405180910390f35b34801561016c57600080fd5b506101876004803603810190610182919061107a565b610417565b005b34801561019557600080fd5b5061019e6104d7565b6040516101ab9190610f06565b60405180910390f35b3480156101c057600080fd5b506101c96104e1565b6040516101d69190611135565b60405180910390f35b3480156101eb57600080fd5b50610206600480360381019061020191906111ab565b610509565b005b34801561021457600080fd5b5061021d610709565b60405161022a9190610edc565b60405180910390f35b34801561023f57600080fd5b50610248610733565b604051610255919061126f565b60405180910390f35b34801561026a57600080fd5b506102856004803603810190610280919061133f565b61074a565b604051610293929190611422565b60405180910390f35b3480156102a857600080fd5b506102b1610832565b6040516102be9190610f06565b60405180910390f35b3480156102d357600080fd5b506102dc61085a565b6040516102e9919061146b565b60405180910390f35b6102fa610882565b005b34801561030857600080fd5b50610311610a1e565b60405161031e9190611556565b60405180910390f35b34801561033357600080fd5b5061033c610aac565b604051610349919061159b565b60405180910390f35b34801561035e57600080fd5b50610367610ad4565b60405161037491906115d5565b60405180910390f35b34801561038957600080fd5b50610392610afc565b60405161039f9190610f06565b60405180910390f35b60008082815481106103bd576103bc6115f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104c092919061161f565b60405180910390fd5b6104d38282610b08565b5050565b6000600254905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006105236040518060200160405280600081525061074a565b509050806105a157600360009054906101000a900460ff16600181111561054d5761054c6111f8565b5b6002544261055b9190611677565b476000805490506040517fb29f5aac00000000000000000000000000000000000000000000000000000000815260040161059894939291906116ab565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156105c7576105c66111f8565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161069195949392919061173e565b6020604051808303816000875af11580156106b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d491906117a6565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360009054906101000a900460ff16905090565b600060606000600360009054906101000a900460ff166001811115610772576107716111f8565b5b60006001811115610786576107856111f8565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107ba9190611677565b119050600080471190506000806000805490501190508380156107da5750825b80156107e35750815b80156107ec5750805b9550856040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610909577f0000000000000000000000000000000000000000000000000000000000000000346040517f825939690000000000000000000000000000000000000000000000000000000081526004016109009291906117d3565b60405180910390fd5b6000600181111561091d5761091c6111f8565b5b600360009054906101000a900460ff16600181111561093f5761093e6111f8565b5b14610976576040517f7d6d79f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f4c72b57c1ca715219cf2c7be9edc8a3ea19dfb9a76fb7a05e2a8062a027ee97060405160405180910390a2565b60606000805480602002602001604051908101604052809291908181526020018280548015610aa257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610a58575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b6000808054905082600081518110610b2357610b226115f0565b5b6020026020010151610b35919061182b565b90506000808281548110610b4c57610b4b6115f0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610bd557610bd4610f37565b5b604051908082528060200260200182016040528015610c035781602001602082028036833780820191505090505b5060009080519060200190610c19929190610d7d565b50426002819055506000600360006101000a81548160ff02191690836001811115610c4757610c466111f8565b5b02179055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610c949061188d565b60006040518083038185875af1925050503d8060008114610cd1576040519150601f19603f3d011682016040523d82523d6000602084013e610cd6565b606091505b5050905080610d11576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610df6579160200282015b82811115610df55782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d9d565b5b509050610e039190610e07565b5090565b5b80821115610e20576000816000905550600101610e08565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610e4b81610e38565b8114610e5657600080fd5b50565b600081359050610e6881610e42565b92915050565b600060208284031215610e8457610e83610e2e565b5b6000610e9284828501610e59565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ec682610e9b565b9050919050565b610ed681610ebb565b82525050565b6000602082019050610ef16000830184610ecd565b92915050565b610f0081610e38565b82525050565b6000602082019050610f1b6000830184610ef7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f6f82610f26565b810181811067ffffffffffffffff82111715610f8e57610f8d610f37565b5b80604052505050565b6000610fa1610e24565b9050610fad8282610f66565b919050565b600067ffffffffffffffff821115610fcd57610fcc610f37565b5b602082029050602081019050919050565b600080fd5b6000610ff6610ff184610fb2565b610f97565b9050808382526020820190506020840283018581111561101957611018610fde565b5b835b81811015611042578061102e8882610e59565b84526020840193505060208101905061101b565b5050509392505050565b600082601f83011261106157611060610f21565b5b8135611071848260208601610fe3565b91505092915050565b6000806040838503121561109157611090610e2e565b5b600061109f85828601610e59565b925050602083013567ffffffffffffffff8111156110c0576110bf610e33565b5b6110cc8582860161104c565b9150509250929050565b6000819050919050565b60006110fb6110f66110f184610e9b565b6110d6565b610e9b565b9050919050565b600061110d826110e0565b9050919050565b600061111f82611102565b9050919050565b61112f81611114565b82525050565b600060208201905061114a6000830184611126565b92915050565b600080fd5b60008083601f84011261116b5761116a610f21565b5b8235905067ffffffffffffffff81111561118857611187611150565b5b6020830191508360018202830111156111a4576111a3610fde565b5b9250929050565b600080602083850312156111c2576111c1610e2e565b5b600083013567ffffffffffffffff8111156111e0576111df610e33565b5b6111ec85828601611155565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611238576112376111f8565b5b50565b600081905061124982611227565b919050565b60006112598261123b565b9050919050565b6112698161124e565b82525050565b60006020820190506112846000830184611260565b92915050565b600080fd5b600067ffffffffffffffff8211156112aa576112a9610f37565b5b6112b382610f26565b9050602081019050919050565b82818337600083830152505050565b60006112e26112dd8461128f565b610f97565b9050828152602081018484840111156112fe576112fd61128a565b5b6113098482856112c0565b509392505050565b600082601f83011261132657611325610f21565b5b81356113368482602086016112cf565b91505092915050565b60006020828403121561135557611354610e2e565b5b600082013567ffffffffffffffff81111561137357611372610e33565b5b61137f84828501611311565b91505092915050565b60008115159050919050565b61139d81611388565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113dd5780820151818401526020810190506113c2565b60008484015250505050565b60006113f4826113a3565b6113fe81856113ae565b935061140e8185602086016113bf565b61141781610f26565b840191505092915050565b60006040820190506114376000830185611394565b818103602083015261144981846113e9565b90509392505050565b6000819050919050565b61146581611452565b82525050565b6000602082019050611480600083018461145c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006114bd82610e9b565b9050919050565b6114cd816114b2565b82525050565b60006114df83836114c4565b60208301905092915050565b6000602082019050919050565b600061150382611486565b61150d8185611491565b9350611518836114a2565b8060005b8381101561154957815161153088826114d3565b975061153b836114eb565b92505060018101905061151c565b5085935050505092915050565b6000602082019050818103600083015261157081846114f8565b905092915050565b600067ffffffffffffffff82169050919050565b61159581611578565b82525050565b60006020820190506115b0600083018461158c565b92915050565b600063ffffffff82169050919050565b6115cf816115b6565b82525050565b60006020820190506115ea60008301846115c6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506116346000830185610ecd565b6116416020830184610ecd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061168282610e38565b915061168d83610e38565b92508282039050818111156116a5576116a4611648565b5b92915050565b60006080820190506116c06000830187610ef7565b6116cd6020830186610ef7565b6116da6040830185610ef7565b6116e76060830184610ef7565b95945050505050565b600061ffff82169050919050565b611707816116f0565b82525050565b600061172861172361171e846116f0565b6110d6565b6115b6565b9050919050565b6117388161170d565b82525050565b600060a082019050611753600083018861145c565b611760602083018761158c565b61176d60408301866116fe565b61177a60608301856115c6565b611787608083018461172f565b9695505050505050565b6000815190506117a081610e42565b92915050565b6000602082840312156117bc576117bb610e2e565b5b60006117ca84828501611791565b91505092915050565b60006040820190506117e86000830185610ef7565b6117f56020830184610ef7565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061183682610e38565b915061184183610e38565b925082611851576118506117fc565b5b828206905092915050565b600081905092915050565b50565b600061187760008361185c565b915061188282611867565b600082019050919050565b60006118988261186a565b915081905091905056fea2646970667358221220de29fa8ab278c574e0877ba88350dfee0edea08ac4955b0688b2cbe188bda30964736f6c63430008130033",
  "devdoc": {
    "author": "Dustin Stacy",
    "details": "This implements the Chainlink VRF Version 2",
    "kind": "dev",
    "methods": {},
    "title": "A sample Lottery Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating a sample raffle contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1189,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "entrants",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1191,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1193,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1196,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(LotteryState)1167"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)1167": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}